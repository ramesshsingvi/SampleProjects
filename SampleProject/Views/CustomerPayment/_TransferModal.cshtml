@using TrustonTap.Common;
@using TrustonTap.Common.Models;
@using TrustonTap.Web.ViewModels;

@model TransferUnallocatedModel

@{
    decimal totalUnallocated = Model.Transaction.AmountUnallocated;
    var payers = Enumerable.Empty<SelectListItem>().ToList();
    if (Model.PayerID > 0)
    {
        payers.Add(new SelectListItem() { Text = Model.PayerID.ToString(), Value = Model.PayerID.ToString(), Selected = true });
    }
}

@using (Html.BeginForm("TransferUnallocated", "CustomerPayment", FormMethod.Post))
{
    <!-- Modal -->
    <div id="transferModal" class="modal fade draggable-modal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                @Html.HiddenFor(x => x.Transaction.ID)
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Transfer Unallocated Payment - @Model.Transaction.Payer.FormattedName</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Amount</label>
                        <div class="input-group">
                            <span class="input-group-btn">
                                <button class="btn btn-info" type="button" onclick="setPaymentAmount(@totalUnallocated); return false;">All</button>
                            </span>
                            @Html.TextBoxFor(x => x.Amount, new { id = "amount", type = "number", step = "0.01", min = "0.01", max= "totalUnallocated", required = true, @class = "form-control currency" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Transfer To</label>
                        @Html.DropDownListFor(x => x.PayerID, payers, new { @style = "width:100%", @class = "form-control combobox payer" })
                    </div>
                    <div class="form-group">
                        <label>Notes</label>
                        @Html.TextAreaFor(x => x.Notes, new { @class = "form-control" })
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-info pull-left" data-dismiss="modal"><i class="fa fa-times fa-md"></i> Close</button>
                    <button id="btnSave" type="submit" class="btn btn-info" disabled><i class="fa fa-save fa-md"></i> Save</button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    $("#amount").on('change', function () {
        if (isNaN(parseFloat($(this).val())))
            $(this).val('0.00');
    });

    $(".payer").select2({
        ajax: {
            url: '/Payer/SearchPayersJSON/',
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    search: params.term
                };
            },
            processResults: function (data) {
                return {
                    results: $.map(data.items, function (obj) {
                        return { id: obj.ID, text: obj.Value };
                    })
                };
            },
            cache: true
        },
        placeholder: 'Search for Payer',
        allowClear: true,
        escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
        minimumInputLength: 1,
        //templateResult: formatRepo,
        //templateSelection: formatRepoSelection
    });

    $(document.body).on("change", ".payer", function () {
        var payerid = this.value;
        if(payerid > 0)
        {
            $('#btnSave').prop("disabled", false);
        }
    });
</script>
